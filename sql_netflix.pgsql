-- SQL Code

SELECT *
FROM NETFLIX_TITLES -- select data to be used

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
ORDER BY RELEASE_YEAR DESC -- release_year verses count

SELECT RELEASE_YEAR,
	COUNT(RELEASE_YEAR)
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL) AS CHECK_YEARCOUNT
GROUP BY RELEASE_YEAR
ORDER BY RELEASE_YEAR DESC -- checks count of total shows and movies before twenties

SELECT TYPE,
	ROUND(AVG(YEAR_BEFORETWENTIES.RUNTIME_HOURS),
								2) AS MEANRUNHOURS,
	COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWBEFORETWENTIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIME_HOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND RELEASE_YEAR < 2000
		ORDER BY RELEASE_YEAR DESC) AS YEAR_BEFORETWENTIES
GROUP BY TYPE -- checks count of total shows and movies after twenties

SELECT TYPE,
	ROUND(AVG(YEAR_AFTERTWENTIES.RUNTIME_HOURS),
								2) AS MEANRUNHOURS,
	COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWAFTERTWENTIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIME_HOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND RELEASE_YEAR > 2000
		ORDER BY RELEASE_YEAR DESC) AS YEAR_AFTERTWENTIES
GROUP BY TYPE -- do FULL JOIN function to join both tables together before twenties and after twenties

SELECT BEFORETWENTIES.TYPE,
	BEFORETWENTIES.TOTALMOVIESANDSHOWBEFORETWENTIES,
	AFTERTWENTIES.TOTALMOVIESANDSHOWAFTERTWENTIES,
	ROUND((BEFORETWENTIES.MEANRUNHOURS + AFTERTWENTIES.MEANRUNHOURS) / 2,
								2) AS MEANHOURS
FROM
	(SELECT TYPE,
			ROUND(AVG(YEAR_BEFORETWENTIES.RUNTIME_HOURS),
				2) AS MEANRUNHOURS,
			COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWBEFORETWENTIES
		FROM
			(SELECT ID,
					TITLE,
					TYPE,
					RELEASE_YEAR,
					AGE_CERTIFICATION,
					ROUND(RUNTIME / 60,

						2) AS RUNTIME_HOURS,
					GENRES
				FROM NETFLIX_TITLES
				WHERE AGE_CERTIFICATION IS NOT NULL
					AND RELEASE_YEAR < 2000
				ORDER BY RELEASE_YEAR DESC) AS YEAR_BEFORETWENTIES
		GROUP BY TYPE) AS BEFORETWENTIES
FULL JOIN
	(SELECT TYPE,
			ROUND(AVG(YEAR_AFTERTWENTIES.RUNTIME_HOURS),
				2) AS MEANRUNHOURS,
			COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWAFTERTWENTIES
		FROM
			(SELECT ID,
					TITLE,
					TYPE,
					RELEASE_YEAR,
					AGE_CERTIFICATION,
					ROUND(RUNTIME / 60,

						2) AS RUNTIME_HOURS,
					GENRES
				FROM NETFLIX_TITLES
				WHERE AGE_CERTIFICATION IS NOT NULL
					AND RELEASE_YEAR > 2000
				ORDER BY RELEASE_YEAR DESC) AS YEAR_AFTERTWENTIES
		GROUP BY TYPE) AS AFTERTWENTIES ON BEFORETWENTIES.TYPE = AFTERTWENTIES.TYPE --------------------------------------------------------------------------------------------------------
-- oldest movie and latest movie from movie and show
-- title VS release_year vs age_certification
 -- Title vs top 5 latest movie aand show

SELECT DISTINCT MAX(RELEASE_YEAR) AS LATESTMNS,
	TITLE,
	TYPE,
	AGE_CERTIFICATION
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
		ORDER BY RELEASE_YEAR DESC) AS DATA_SEE
GROUP BY TITLE,
	TYPE,
	AGE_CERTIFICATION
HAVING MAX(RELEASE_YEAR) > 2021
ORDER BY MAX(RELEASE_YEAR)
LIMIT 5 -- Title vs top 5 oldest movie and show

SELECT DISTINCT MIN(RELEASE_YEAR) AS OLDESTMNS,
	TITLE,
	TYPE,
	AGE_CERTIFICATION
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
		ORDER BY RELEASE_YEAR DESC) AS DATA_SEE
GROUP BY TITLE,
	TYPE,
	AGE_CERTIFICATION
HAVING MIN(RELEASE_YEAR) < 1990
ORDER BY MIN(RELEASE_YEAR)
LIMIT 5 -- create table for Movies genres vs count
-----------------------------------------------------------------------------------------------------
-- checkes titles of scifi

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
	AND GENRES LIKE '%scifi%'
	AND TYPE = 'MOVIE'
ORDER BY RELEASE_YEAR DESC -- total count of genres produced by scifi

SELECT CHECKCOUNTOFSCIFI.TYPE,
	COUNT(CHECKCOUNTOFSCIFI.TYPE) AS TOTAL_SCIFIFANTASYDRAMA_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%scifi%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFSCIFI
GROUP BY CHECKCOUNTOFSCIFI.TYPE --checks titles of horroe and thriller

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
	AND GENRES LIKE '%horror%thriller%'
	AND TYPE = 'MOVIE'
ORDER BY RELEASE_YEAR DESC -- total count of genres produced by horroe and thriller

SELECT CHECKCOUNTOFHORRORTHRILLER.TYPE,
	COUNT(CHECKCOUNTOFHORRORTHRILLER.TYPE) AS TOTAL_HORRORTHRILLER_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%horror%thriller%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFHORRORTHRILLER
GROUP BY CHECKCOUNTOFHORRORTHRILLER.TYPE --checks titles of romance

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
	AND GENRES LIKE '%romance%'
	AND TYPE = 'MOVIE'
ORDER BY RELEASE_YEAR DESC -- check count of romance

SELECT CHECKCOUNTOFROMANCE.TYPE,
	COUNT(CHECKCOUNTOFROMANCE.TYPE) AS TOTAL_ROMANCE_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%romance%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFROMANCE
GROUP BY CHECKCOUNTOFROMANCE.TYPE -- checks titles of  history

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
	AND GENRES LIKE '%documentation%history%'
	AND TYPE = 'MOVIE'
ORDER BY RELEASE_YEAR DESC -- checks count of history

SELECT CHECKCOUNTOFHISTORY.TYPE,
	COUNT(CHECKCOUNTOFHISTORY.TYPE) AS TOTAL_HISTORY_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%history%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFHISTORY
GROUP BY CHECKCOUNTOFHISTORY.TYPE -- checks titles of sport

SELECT ID,
	TITLE,
	TYPE,
	RELEASE_YEAR,
	AGE_CERTIFICATION,
	ROUND(RUNTIME / 60,
								2) AS RUNTIMEHOURS,
	GENRES
FROM NETFLIX_TITLES
WHERE AGE_CERTIFICATION IS NOT NULL
	AND GENRES LIKE '%sport%'
	AND TYPE = 'MOVIE'
ORDER BY RELEASE_YEAR DESC -- checks count of sport

SELECT CHECKCOUNTOFSPORT.TYPE,
	COUNT(CHECKCOUNTOFSPORT.TYPE) AS TOTAL_SPORT_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%sport%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFSPORT
GROUP BY CHECKCOUNTOFSPORT.TYPE -- count of action

SELECT CHECKCOUNTOFACTION.TYPE,
	COUNT(CHECKCOUNTOFACTION.TYPE) AS TOTAL_ACTION_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%action%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFACTION
GROUP BY CHECKCOUNTOFACTION.TYPE -- count of documentation

SELECT CHECKCOUNTOFDOCUMENTATION.TYPE,
	COUNT(CHECKCOUNTOFDOCUMENTATION.TYPE) AS TOTAL_DOCUMENTATION_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%documentation%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFDOCUMENTATION
GROUP BY CHECKCOUNTOFDOCUMENTATION.TYPE -- count of comedy and family

SELECT CHECKCOUNTOFCOMEDYFAMILY.TYPE,
	COUNT(CHECKCOUNTOFCOMEDYFAMILY.TYPE) AS TOTAL_COMEDYFAMILY_MOVIES
FROM
	(SELECT ID,
			TITLE,
			TYPE,
			RELEASE_YEAR,
			AGE_CERTIFICATION,
			ROUND(RUNTIME / 60,
				2) AS RUNTIMEHOURS,
			GENRES
		FROM NETFLIX_TITLES
		WHERE AGE_CERTIFICATION IS NOT NULL
			AND GENRES LIKE '%comedy%family%'
			AND TYPE = 'MOVIE'
		ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFCOMEDYFAMILY
GROUP BY CHECKCOUNTOFCOMEDYFAMILY.TYPE -- create table to show count of each Genre type in movie

CREATE TABLE GENREVSCOUNT (TYPE VARCHAR(10),
																												GENRE VARCHAR(50),
																												COUNT_MOVIEGENRETYPESPRODUCED numeric )--run first to check if table successfully created

INSERT INTO GENREVSCOUNT (TYPE,
																											GENRE,
																											COUNT_MOVIEGENRETYPESPRODUCED)
VALUES ('MOVIE','scifi',134),
							('MOVIE','horror_thriller',56),
							('MOVIE','romance',275),
							('MOVIE','history',61),
							('MOVIE','sport',62),
							('MOVIE','drama_action',348),
							('MOVIE','documentary',142),
							('MOVIE', 'comedyandfamily', 99) SELECT * FROM GENREVSCOUNT --above genreVScount of MOVIES ONLY
-------------------------------------------------------------------------------------
 -- genreVScount of SHOW ONLY
 -- checkes titles of scifi
SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%scifi%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC -- total count of genres produced by scifi
SELECT CHECKCOUNTOFSCIFI.TYPE, COUNT(CHECKCOUNTOFSCIFI.TYPE) AS TOTAL_SCIFIFANTASYDRAMA_SHOWS FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%scifi%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFSCIFI GROUP BY CHECKCOUNTOFSCIFI.TYPE --checks titles of horroe and thriller
SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%horror%thriller%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC -- total count of genres produced by horroe and thriller
SELECT CHECKCOUNTOFHORRORTHRILLER.TYPE, COUNT(CHECKCOUNTOFHORRORTHRILLER.TYPE) AS TOTAL_HORRORTHRILLER_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%horror%thriller%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFHORRORTHRILLER GROUP BY CHECKCOUNTOFHORRORTHRILLER.TYPE --checks titles of romance
SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%romance%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC -- check count of romance
SELECT CHECKCOUNTOFROMANCE.TYPE, COUNT(CHECKCOUNTOFROMANCE.TYPE) AS TOTAL_ROMANCE_SHOWS FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%romance%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFROMANCE GROUP BY CHECKCOUNTOFROMANCE.TYPE -- checks titles of  history
SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%documentation%history%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC -- checks count of history
SELECT CHECKCOUNTOFHISTORY.TYPE, COUNT(CHECKCOUNTOFHISTORY.TYPE) AS TOTAL_HISTORY_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%history%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFHISTORY GROUP BY CHECKCOUNTOFHISTORY.TYPE -- checks titles of sport
SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%sport%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC -- checks count of sport
SELECT CHECKCOUNTOFSPORT.TYPE, COUNT(CHECKCOUNTOFSPORT.TYPE) AS TOTAL_SPORT_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%sport%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFSPORT GROUP BY CHECKCOUNTOFSPORT.TYPE -- count of action
SELECT CHECKCOUNTOFACTION.TYPE, COUNT(CHECKCOUNTOFACTION.TYPE) AS TOTAL_ACTION_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%action%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFACTION GROUP BY CHECKCOUNTOFACTION.TYPE -- count of documentation
SELECT CHECKCOUNTOFDOCUMENTATION.TYPE, COUNT(CHECKCOUNTOFDOCUMENTATION.TYPE) AS TOTAL_DOCUMENTATION_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%documentation%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFDOCUMENTATION GROUP BY CHECKCOUNTOFDOCUMENTATION.TYPE -- count of comedy and family
SELECT CHECKCOUNTOFCOMEDYFAMILY.TYPE, COUNT(CHECKCOUNTOFCOMEDYFAMILY.TYPE) AS TOTAL_COMEDYFAMILY_SHOW FROM (SELECT ID, TITLE, TYPE, RELEASE_YEAR, AGE_CERTIFICATION, ROUND(RUNTIME / 60,2) AS RUNTIMEHOURS, GENRES FROM NETFLIX_TITLES WHERE AGE_CERTIFICATION IS NOT NULL AND GENRES LIKE '%comedy%family%' AND TYPE = 'SHOW' ORDER BY RELEASE_YEAR DESC) AS CHECKCOUNTOFCOMEDYFAMILY GROUP BY CHECKCOUNTOFCOMEDYFAMILY.TYPE -- create table to show count of each Genre type in show
DROP TABLE IF EXISTS GENREVSCOUNT_SHOW CREATE TABLE GENREVSCOUNT_SHOW (TYPE VARCHAR(10), GENRE VARCHAR(50), COUNT_SHOWGENRETYPESPRODUCED numeric )--run first to check if table successfully created
INSERT INTO GENREVSCOUNT_SHOW (TYPE, GENRE, COUNT_SHOWGENRETYPESPRODUCED) VALUES ('SHOW','scifi',351),



																																																																																	('SHOW','horror_thriller',34),
																																																																																	('SHOW','romance',234),
																																																																																	('SHOW','history',84),
																																																																																	('SHOW','sport',52),
																																																																																	('SHOW','drama_action',383),
																																																																																	('SHOW','documentary',275),
																																																																																	('SHOW', 'comedyandfamily', 152) SELECT * FROM GENREVSCOUNT_SHOW -----------------------------------------------------------------------------------------------
--remove countries with empty cells and null values and compare with countries and release_year
SELECT * FROM PUBLIC.NETFLIX_COUNTRY AS COUNTRY INNER JOIN PUBLIC.NETFLIX_TITLES AS TITLES ON COUNTRY.ID = TITLES.ID WHERE IMDB_SCORE IS NOT NULL AND COUNTRY.PRODUCTION_COUNTRIES <> '' AND IMDB_VOTES IS NOT NULL -- Looking production_countries VS release year VS IMDB
SELECT COUNTRY.ID, COUNTRY.TITLE, COUNTRY.PRODUCTION_COUNTRIES, RELEASE_YEAR,RUNTIME,TITLES.GENRES, SUM(IMDB_VOTES) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_VOTESBYCOUNTRY, ROUND(AVG(IMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGIMDB_SCOREBYCOUNTRY, ROUND(AVG(TMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGTMDB_SCOREBYCOUNTRY, SUM(TMDB_POPULARITY) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_POPULARITYBYCOUNTRY FROM PUBLIC.NETFLIX_COUNTRY AS COUNTRY INNER JOIN PUBLIC.NETFLIX_TITLES AS TITLES ON COUNTRY.ID = TITLES.ID WHERE IMDB_SCORE IS NOT NULL AND IMDB_VOTES IS NOT NULL ORDER BY RELEASE_YEAR DESC -- use CommonTableExpression (CTE)- To proof positive correlation b/w votes and popularity by country(grouped)
-- run from 'with' to 'desc'
WITH AVGTMDBVSAVGIMDB_BYCOUNTRY (ID, TITLE, PRODUCTION_COUNTRIES, RELEASE_YEAR, TOTALIMDB_VOTESBYCOUNTRY, AVGIMDB_SCOREBYCOUNTRY, AVGTMDB_SCOREBYCOUNTRY, TOTALIMDB_POPULARITYBYCOUNTRY) AS (SELECT COUNTRY.ID, COUNTRY.TITLE, COUNTRY.PRODUCTION_COUNTRIES, RELEASE_YEAR, SUM(IMDB_VOTES) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_VOTESBYCOUNTRY, ROUND(AVG(IMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGIMDB_SCOREBYCOUNTRY, ROUND(AVG(TMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGTMDB_SCOREBYCOUNTRY, SUM(TMDB_POPULARITY) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_POPULARITYBYCOUNTRY FROM PUBLIC.NETFLIX_COUNTRY AS COUNTRY INNER JOIN PUBLIC.NETFLIX_TITLES AS TITLES ON COUNTRY.ID = TITLES.ID WHERE IMDB_SCORE IS NOT NULL AND IMDB_VOTES IS NOT NULL) --ORDER BY release_year DESC
SELECT *, ROUND(TOTALIMDB_POPULARITYBYCOUNTRY / TOTALIMDB_VOTESBYCOUNTRY * 100,3) AS IMDB_VOTESVSPOPULARITY FROM AVGTMDBVSAVGIMDB_BYCOUNTRY ORDER BY RELEASE_YEAR DESC ----------------------------------------------------------------------------------------------------------
-- Temp table
--below function good to have if there is any alterations made in insert to query, without having to delete or amend
DROP TABLE IF EXISTS COUNTRYVSRATING -- create tabel
CREATE TABLE COUNTRYVSRATING (ID VARCHAR(255) PRIMARY KEY, PRODUCTION_COUNTRIES CHAR(255), TOTALIMDB_VOTESBYCOUNTRY bigint, AVGIMDB_SCOREBYCOUNTRY numeric, AVGTMDB_SCOREBYCOUNTRY numeric, TOTALIMDB_POPULARITYBYCOUNTRY bigint, IMDB_VOTESVSPOPULARITY numeric)--Checkpoint as above create table
-- create insert into query
INSERT INTO COUNTRYVSRATING SELECT COUNTRY.ID, COUNTRY.PRODUCTION_COUNTRIES, SUM(IMDB_VOTES) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_VOTESBYCOUNTRY, ROUND(AVG(IMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGIMDB_SCOREBYCOUNTRY, ROUND(AVG(TMDB_SCORE) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES),3) AS AVGTMDB_SCOREBYCOUNTRY, SUM(TMDB_POPULARITY) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)AS TOTALIMDB_POPULARITYBYCOUNTRY, ROUND(((SUM(TMDB_POPULARITY) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES)) / (SUM(IMDB_VOTES) OVER (PARTITION BY COUNTRY.PRODUCTION_COUNTRIES))) * 100, 3) AS IMDB_VOTESVSPOPULARITY FROM PUBLIC.NETFLIX_COUNTRY AS COUNTRY INNER JOIN PUBLIC.NETFLIX_TITLES AS TITLES ON COUNTRY.ID = TITLES.ID WHERE IMDB_SCORE IS NOT NULL AND IMDB_VOTES IS NOT NULL --ORDER BY release_year DESC
-- checks that data present in new table created
SELECT * FROM COUNTRYVSRATING -- delete column ID from countryVSrating and remove empty rows of country
ALTER TABLE COUNTRYVSRATING DROP COLUMN ID DELETE FROM COUNTRYVSRATING WHERE PRODUCTION_COUNTRIES IS NULL OR TRIM(PRODUCTION_COUNTRIES) = '' SELECT * FROM COUNTRYVSRATING -- update table of countryVSrating
ALTER TABLE COUNTRYVSRATING ADD AVGIMDB_PERCENTSCORE NUMERIC, ADD AVGTMDB_PERCENTSCORE NUMERIC --input data to new column created in countryVSrating
UPDATE COUNTRYVSRATING SET AVGIMDB_PERCENTSCORE = ROUND((AVGIMDB_SCOREBYCOUNTRY / 10) * 100,2), AVGTMDB_PERCENTSCORE = ROUND((AVGTMDB_SCOREBYCOUNTRY / 10) * 100,2)--checkpoint
SELECT * FROM COUNTRYVSRATING ORDER BY PRODUCTION_COUNTRIES -- group together by countries only from countryVSrating
SELECT PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, MAX(TOTALIMDB_POPULARITYBYCOUNTRY) AS IMDB_POPULARITYBYCOUNTRY FROM COUNTRYVSRATING GROUP BY PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, TOTALIMDB_POPULARITYBYCOUNTRY ORDER BY PRODUCTION_COUNTRIES -- take only exclusive countries
SELECT * FROM (SELECT PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, MAX(TOTALIMDB_POPULARITYBYCOUNTRY) AS IMDB_POPULARITYBYCOUNTRY FROM COUNTRYVSRATING GROUP BY PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, TOTALIMDB_POPULARITYBYCOUNTRY ORDER BY PRODUCTION_COUNTRIES) AS COUNTRYVSPERCENTRATING WHERE PRODUCTION_COUNTRIES NOT LIKE '%,%' --create table for exclusive countryVS percent rating
DROP TABLE IF EXISTS EXCLUSIVECOUNTRYVSRATING CREATE TABLE EXCLUSIVECOUNTRYVSRATING (PRODUCTION_COUNTRIES CHAR(20), IMDB_VOTESVSPOPULARITY NUMERIC, AVGIMDB_PERCENTSCORE NUMERIC, AVGTMDB_PERCENTSCORE NUMERIC, IMDB_POPULARITYBYCOUNTRY NUMERIC) INSERT INTO EXCLUSIVECOUNTRYVSRATING SELECT * FROM (SELECT PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, MAX(TOTALIMDB_POPULARITYBYCOUNTRY) AS IMDB_POPULARITYBYCOUNTRY FROM COUNTRYVSRATING GROUP BY PRODUCTION_COUNTRIES, IMDB_VOTESVSPOPULARITY, AVGIMDB_PERCENTSCORE, AVGTMDB_PERCENTSCORE, TOTALIMDB_POPULARITYBYCOUNTRY ORDER BY PRODUCTION_COUNTRIES) AS COUNTRYVSPERCENTRATING WHERE PRODUCTION_COUNTRIES NOT LIKE '%,%' --checkpoint for new table exclusivecountryVSrating
SELECT * FROM EXCLUSIVECOUNTRYVSRATING ------------------------------------------------------------------------------------------------------------------------
-- select to show comparisons of titles verses high imdb_score>8
-- with timestamp feature
SELECT ID, TITLE,IMDB_SCORE,PRODUCTION_COUNTRIES,DELETED_AT FROM PUBLIC.NETFLIX_COUNTRY WHERE IMDB_SCORE > 8 ORDER BY IMDB_SCORE DESC -- add timestamp to show when rows of corresponding columns are deleted
ALTER TABLE PUBLIC.NETFLIX_COUNTRY ADD COLUMN DELETED_AT TIMESTAMPTZ --Drop COLUMN deleted_at
-- to test on timestamp to remove null production_countries
UPDATE PUBLIC.NETFLIX_COUNTRY SET DELETED_AT = NOW()
WHERE PRODUCTION_COUNTRIES IS NULL
	AND IMDB_SCORE > 8;

-- timezone and now

SELECT NOW();

SHOW TIMEZONE;


SELECT TIMEOFDAY();

------------------------------------------------------------------------------------------------------------------------------------
 -- to show deleted timestamp

SELECT TITLE,
	PRODUCTION_COUNTRIES,
	IMDB_SCORE,
	IMDB_VOTES,
	DELETED_AT
FROM PUBLIC.NETFLIX_COUNTRY
WHERE IMDB_SCORE > 8
ORDER BY IMDB_SCORE DESC -- show distinct countries verses imdb votes
--shows correlation between imdb votes and imdb_votes of >500k
-- CREATE TABLE ABOVE

DROP TABLE IF EXISTS TITLEVSIMDB_VOTES
CREATE TABLE TITLEVSIMDB_VOTES (PRODUCTION_COUNTRIES CHAR(50),
																																	IMDB_VOTES BIGINT, TITLE VARCHAR(100),
																																	IMDB_SCORE INT)
INSERT INTO TITLEVSIMDB_VOTES
SELECT DISTINCT PRODUCTION_COUNTRIES,
	IMDB_VOTES,
	TITLE,
	IMDB_SCORE
FROM PUBLIC.NETFLIX_COUNTRY
WHERE PRODUCTION_COUNTRIES IS NOT NULL
	AND IMDB_VOTES IS NOT NULL
	AND IMDB_VOTES > 500000
ORDER BY IMDB_VOTES DESC --check

SELECT *
FROM TITLEVSIMDB_VOTES --shows correlation between tmdb popularity and tmdb scores >500
--CREATE TABLE ABOVE

CREATE TABLE TITLEVSTMDB_POPULARITY (PRODUCTION_COUNTRIES CHAR(50),
																																						TMDB_POPULARITY BIGINT, TITLE VARCHAR(200),
																																						TMDB_SCORE INT)
INSERT INTO TITLEVSTMDB_POPULARITY
SELECT DISTINCT PRODUCTION_COUNTRIES,
	TMDB_POPULARITY,
	TITLE,
	TMDB_SCORE
FROM PUBLIC.NETFLIX_COUNTRY
WHERE PRODUCTION_COUNTRIES IS NOT NULL
	AND TMDB_POPULARITY IS NOT NULL
	AND TMDB_POPULARITY > 500
ORDER BY TMDB_POPULARITY DESC --check

SELECT *
FROM TITLEVSTMDB_POPULARITY -----------------------------------------------------------------------------------------------------------------------
-- VIEWS to store data later for Tableau BIvisualization
-- create view for countmovieshowvsmeanhours

CREATE VIEW COUNTMOVIESHOWVSMEANHOURS AS
	(SELECT BEFORETWENTIES.TYPE,
			BEFORETWENTIES.TOTALMOVIESANDSHOWBEFORETWENTIES,
			AFTERTWENTIES.TOTALMOVIESANDSHOWAFTERTWENTIES,
			ROUND((BEFORETWENTIES.MEANRUNHOURS + AFTERTWENTIES.MEANRUNHOURS) / 2,
				2) AS MEANHOURS
		FROM
			(SELECT TYPE,
					ROUND(AVG(YEAR_BEFORETWENTIES.RUNTIME_HOURS),

						2) AS MEANRUNHOURS,
					COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWBEFORETWENTIES
				FROM
					(SELECT ID,
							TITLE,
							TYPE,
							RELEASE_YEAR,
							AGE_CERTIFICATION,
							ROUND(RUNTIME / 60,

								2) AS RUNTIME_HOURS,
							GENRES
						FROM NETFLIX_TITLES
						WHERE AGE_CERTIFICATION IS NOT NULL
							AND RELEASE_YEAR < 2000
						ORDER BY RELEASE_YEAR DESC) AS YEAR_BEFORETWENTIES
				GROUP BY TYPE) AS BEFORETWENTIES
		FULL JOIN
			(SELECT TYPE,
					ROUND(AVG(YEAR_AFTERTWENTIES.RUNTIME_HOURS),

						2) AS MEANRUNHOURS,
					COUNT(RELEASE_YEAR) AS TOTALMOVIESANDSHOWAFTERTWENTIES
				FROM
					(SELECT ID,
							TITLE,
							TYPE,
							RELEASE_YEAR,
							AGE_CERTIFICATION,
							ROUND(RUNTIME / 60,

								2) AS RUNTIME_HOURS,
							GENRES
						FROM NETFLIX_TITLES
						WHERE AGE_CERTIFICATION IS NOT NULL
							AND RELEASE_YEAR > 2000
						ORDER BY RELEASE_YEAR DESC) AS YEAR_AFTERTWENTIES
				GROUP BY TYPE) AS AFTERTWENTIES ON BEFORETWENTIES.TYPE = AFTERTWENTIES.TYPE)
SELECT *
FROM COUNTMOVIESHOWVSMEANHOURS -- create view for exclusivecountryvsrating

CREATE VIEW COUNTRY_RATING AS
SELECT *
FROM EXCLUSIVECOUNTRYVSRATING -- create view for genrevscount OF MOVIE

CREATE VIEW GENRE_COUNT_MOVIE AS
SELECT *
FROM GENREVSCOUNT -- create view for genre vs count OF SHOW

CREATE VIEW GENRE_COUNT_SHOW AS
SELECT *
FROM GENREVSCOUNT_SHOW -- create view for titlevsrelease_year

CREATE VIEW TITLE_IMDBVOTES AS
SELECT *
FROM TITLEVSIMDB_VOTES -- create view for titlevstmdb_popularity

CREATE VIEW TITLE_TMDBPOPULARITY AS
SELECT *
FROM TITLEVSTMDB_POPULARITY -- create view for 5 latest movies and shows with titles

CREATE VIEW LATEST_MNS AS
	(SELECT DISTINCT MAX(RELEASE_YEAR) AS LATESTMNS,
			TITLE,
			TYPE,
			AGE_CERTIFICATION
		FROM
			(SELECT ID,
					TITLE,
					TYPE,
					RELEASE_YEAR,
					AGE_CERTIFICATION,
					ROUND(RUNTIME / 60,

						2) AS RUNTIMEHOURS,
					GENRES
				FROM NETFLIX_TITLES
				WHERE AGE_CERTIFICATION IS NOT NULL
				ORDER BY RELEASE_YEAR DESC) AS DATA_SEE
		GROUP BY TITLE,
			TYPE,
			AGE_CERTIFICATION
		HAVING MAX(RELEASE_YEAR) > 2021
		ORDER BY MAX(RELEASE_YEAR)
		LIMIT 5)
SELECT *
FROM LATEST_MNS -- create view Title vs 5 oldest movie and show

CREATE VIEW OLDEST_MNS AS
	(SELECT DISTINCT MIN(RELEASE_YEAR) AS OLDESTMNS,
			TITLE,
			TYPE,
			AGE_CERTIFICATION
		FROM
			(SELECT ID,
					TITLE,
					TYPE,
					RELEASE_YEAR,
					AGE_CERTIFICATION,
					ROUND(RUNTIME / 60,

						2) AS RUNTIMEHOURS,
					GENRES
				FROM NETFLIX_TITLES
				WHERE AGE_CERTIFICATION IS NOT NULL
				ORDER BY RELEASE_YEAR DESC) AS DATA_SEE
		GROUP BY TITLE,
			TYPE,
			AGE_CERTIFICATION
		HAVING MIN(RELEASE_YEAR) < 1990
		ORDER BY MIN(RELEASE_YEAR)
		LIMIT 5)
SELECT *
FROM OLDEST_MNS --create view of release_year verses number of movies and show produced by year

CREATE VIEW YEAR_COUNT AS
	(SELECT RELEASE_YEAR,
			COUNT(RELEASE_YEAR)
		FROM
			(SELECT ID,
					TITLE,
					TYPE,
					RELEASE_YEAR,
					AGE_CERTIFICATION,
					ROUND(RUNTIME / 60,

						2) AS RUNTIMEHOURS,
					GENRES
				FROM NETFLIX_TITLES
				WHERE AGE_CERTIFICATION IS NOT NULL) AS CHECK_YEARCOUNT
		GROUP BY RELEASE_YEAR
		ORDER BY RELEASE_YEAR DESC)
SELECT *
FROM YEAR_COUNT